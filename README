Snerp Vortex is an anagram of SVN Exporter.  It aims to be a faster,
more reliable way to create new repositories from Subversion dumps
than using git-svn and various abandonment techniques.

I started this project because the svn-to-git methods I'd tried were
slow and produced unsatisfying results.

Snerp Vortex works by replaying a Subversion repository dump into a
local directory.  After each revision, it performs actions in another
version control system, such as committing the new repository snapshot
into git.  It also creates branches and tags as appropriate, and it's
smart enough to tell the difference between them based on usage---not
just because a directory is in /branches or /tags.

The end result is a new repository with the significant history of the
old one.  I say "significant" because some Subversion changes (such as
property changes) don't map to other systems.

Usage is simple.  See "./snerp --help".

I consider this program to be "alpha" quality.  It seems to work in a
limited test, exporting the first 2751 revisions of POE's repository
(branches, tags and all) in a little under 5 minutes.  To be fair, it
was reading from and writing to a RAM disk at the time.  See the
mkramdisk_osx utility in this project.

Snerp Vortex is not widely tested yet.  "It works for me", but it
chokes on nonstandard repository layouts.  Please help make Snerp
Vortex robust.

=========
OSX Users
=========

Get yourselves a case-sensitive filesystem.  This is easier done than
said.  Disk Utility can create empty random-access disk images with
the filesystems of your choice.  They mount in /Volumes and are
accessible like any other filesystem.

Even better, build a RAM disk if you have the memory to spare.  See
the mkramdisk_osx utility in this project.

=============
Improvements?
=============

I have only recently discovered git-fast-import.  I wish I knew about
it sooner.  Snerp Vortex is flexible enough to use it later, with a
potential speed boost.

=======
Testing
=======

Until there's a proper test framework, here's the plan from a recent
test I ran.

Create a dummy repository, check it out and establish a test case
within it.

	svnadmin create binary-svn
	svn co file:///home/troc/projects/git/binary-svn binary-co          
	cd binary-co
	cp ~/Downloads/wtf.gif .
	svn add wtf.gif
	svn commit -m 'Commit a binary file.' 

Dump the repository.

	cd ..
	svnadmin dump binary-svn > binary-svn.dump

Replay the repository into git.

	cd snerp-vortex

	time ./snerp \
		--replayer=git \
		--authors=/home/troc/projects/authors.txt \
		--into=/Volumes/snerp-vortex-workspace/binary-git \
		--dump=../binary-files.dump \
		--copies=/Volumes/snerp-vortex-workspace/binary-snerp-copies \
		--experimental \
		--verbose

Verify that the replayed binary file works.

	open /Volumes/snerp-vortex-workspace/binary-git/wtf.gif

The distribution's t/dumps directory is the repository for test dumps.

============
Design Notes
============

There are multiple kinds of branch, some of which don't map to Git's
idea of branches.  For example, there's the branch that is someone's
personal scratch workspace.  Then there's the branch intended to be
merged back later.

Tags and branches are defined by usage patterns, not by the
directories in which they live.  Proper branches and tags are created
by copying, not by creating directories.  The difference is that
branches are modified after copying while tags are not.  Subversion
"tags" are frequently modified, and "branches" are sometimes never
touched.  Snerp Vortex tries to be smart about this.

Subprojects are not attempted to be spun off into separate
repositories.  In personal experience, spin-off projects are moved
from /trunk into some new directory, possibly also in trunk.  The
files are then modified there.  To preserve full history, I plan to
fork the full Git repository and follow Michaelangelo's advice: carve
away everything that isn't the project.  Better plans are welcome.

Subversion can tag subdirectories within trunk.  After all, tags are
just directory copies.  Git cannot.  Subversion tags are translated to
Git by tagging HEAD at the relative moment when the Subversion tree
has been tagged.  Is there a better way to do this?
