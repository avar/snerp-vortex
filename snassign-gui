#!/usr/bin/env perl

# Given a snaalyze XML file, allow a user to page through a
# repository's significant revisions.  Display a Gtk2 TreeView of the
# directory structure at each revision.
#
# TODO - Eventually allow the user to select which directories are
# branches and tags at each revision, so that Snerp Vortex can do the
# right thing when replaying the repository into another system.
#
# TODO - Given sufficient motivation, the XML intermediate format
# could be made generic enough to represent repositories from version
# control systems other than Subversion.  Snerp Vortex could become an
# any-to-any tool, rather than a Subversion-to-any tool.
#
# Wouldn't that be nice?
#
# TODO - Scroll bars on the TreeView.  Large repositories extend below
# the bottom of the screen.
#
# TODO - Remember state of paths between revisions.  Probably by
# pushing the state into the SVN::Analysis object.  That way the state
# may be saved and loaded with the analysis.  The replay phase can
# then use the tags & branches to do the right things.

use warnings;
use strict;
use lib qw(./lib);

use Getopt::Long;
use SVN::Analysis;

use Glib qw(TRUE FALSE);
use Gtk2 '-init';
use Gtk2::Ex::Simple::Tree;

my ($help, $xml_file_name);
my $getopt_okay = GetOptions(
	"help"        => \$help,
	"analysis=s"  => \$xml_file_name,
);

if ($help or !$getopt_okay) {
	die(
		"$0 usage:\n",
		"  --analysis=FILENAME  location of snanalyze XML output\n",
		"  --help               you're soaking in it.\n",
	);
}

die "$0: --analysis=FILENAME required\n" unless (
	defined $xml_file_name and length $xml_file_name
);
die "$0: --analysis path ($xml_file_name) doesn't exist\n" unless (
	-e $xml_file_name
);
die "$0: --analysis path ($xml_file_name) must be a file\n" unless (
	-f $xml_file_name
);

### Load the Subversion analysis.

my $analysis = SVN::Analysis->new();
$analysis->init_from_xml_file($xml_file_name);

### Window.

my $window = Gtk2::Window->new('toplevel');
$window->signal_connect('delete_event' => sub { Gtk2->main_quit; });
$window->set_border_width(5);

### Vertical layout box.

my $v_box = Gtk2::VBox->new(FALSE, 0);
$window->add($v_box);

### Revisions and the revision labels.

my @revisions = $analysis->significant_revisions();
my ($revision_index, $current_revision);

my $revision_box = Gtk2::VBox->new(FALSE, 0);

my $revision_label = Gtk2::Label->new("#");
$revision_box->pack_start($revision_label, 0, 0, 0);

my $which_label = Gtk2::Label->new("");
$revision_box->pack_start($which_label, 0, 0, 0);

sub next_revision { set_revision($revision_index + 1) }
sub prev_revision { set_revision($revision_index - 1) }

sub set_revision {
	my $i = shift;

	$i = 0            if $i < 0;
	$i = $#revisions  if $i > $#revisions;

	$revision_index   = $i;
	$current_revision = $revisions[$i];

	$revision_label->set_text("Revision $current_revision");

	my $which = "";
	$which .= " (first)" if $i == 0;
	$which .= " (last)"  if $i == $#revisions;

	$which_label->set_text($which);
}

set_revision(0);

### Navigation buttons.

my $nav_box = Gtk2::HBox->new(FALSE, 0);
$v_box->pack_start($nav_box, 0, 0, 0);

my $prev_button = Gtk2::Button->new("<");
$prev_button->signal_connect(
	clicked => sub {
		prev_revision();
		populate_tree($current_revision);
	}
);

$nav_box->pack_start($prev_button, 0, 0, 0);

my $next_button = Gtk2::Button->new(">");
$next_button->signal_connect(
	clicked => sub {
		next_revision();
		populate_tree($current_revision);
	}
);

$nav_box->pack_start($next_button, 0, 0, 0);

$nav_box->pack_start($revision_box, 1, 1, 0);

### The repository tree.

my $repository_tree = Gtk2::Ex::Simple::Tree->new(
	Path => 'text'
);

$v_box->pack_start($repository_tree, 1, 1, 0);

sub populate_tree {
	my $r = shift;
	@{$repository_tree->{data}} = $analysis->as_gtk_ex_simple_tree_then($r);
	$repository_tree->expand_all();
}

populate_tree($current_revision);


$window->show_all();

Gtk2->main();
exit;
